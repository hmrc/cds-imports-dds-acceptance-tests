play.ws.ssl.loose.acceptAnyCertificate = true

# Below properties are used to configure Zap Api.
# Refer to https://github.com/hmrc/zap-automation/blob/master/src/main/resources/reference.conf for all configurable
# properties
zap-automation-config {

  # Conducts a ZAP active scan if set to true.
  activeScan = true

  # Fails test only if the reported alert's severity is above or same as the provided failureThreshold.
  # Example:
  # failureThreshold = "Medium" will not fail the test if the report has only Low and Informational alerts.
  # Test will fail if there are any Medium or High Alerts
  # Accepted Values: High, Medium, Low
  failureThreshold = "Medium"

  # Required field. It will rarely need to be changed. We've included it as an overridable
  # field for flexibility and just in case.
  zapBaseUrl = "http://localhost:11000"

  # Required field. This is the seed url for the spider scan. It needs to be the URL of the start page of
  # your application (not just localhost:port).
  testUrl = "http://localhost:9760/cds-imports-dds-frontend/"

  # Not a required field. This url is added as the base url to your context.
  # A context is a construct in Zap that limits the scope of any attacks run to a
  # particular domain (this doesn't mean that Zap won't find alerts on other services during the
  # browser test run).
  # This would usually be the base url of your service - eg http://localhost:xxxx.*
  contextBaseUrlRegex = "http://localhost:9760.*"

  # Not a required field. This value, if set to true, will ignore all alerts from optimizely.
  ignoreOptimizelyAlerts = false

  # Not a required field. These are the urls that the zap-automation library
  # will use to filter out the alerts that are shown to you. Note that while Zap is doing
  # testing, it is likely to find alerts from other services that you don't own - for example
  # from logging in, therefore we recommend that you set this to be urls for the
  # service you are interested in.
  alertUrlsToReport = ["http://localhost:9760"]

  # Not a required field. You should set this to be true if you are testing an API.
  # By default this assumes you are testing a UI and therefore is defaulted to be false.
  //  testingAnApi = true

  # Not a required field. You may set this if you have any routes that are part of your
  # application, but you do not want tested. For example, if you had any test-only routes, you
  # could force Zap not to test them by adding them in here as a regex.
  routeToBeIgnoredFromContext = ""

  # Not a required field. We recommend you don't change this field, as we've made basic choices
  # for the platform. We made it overridable just in case your service differs from the
  # standards of the Platform.
  #
  # The technologies that you put here will limit the amount of checks that ZAP will do to
  # just the technologies that are relevant. The default technologies are set to
  # "OS,OS.Linux,Language,Language.Xml,SCM,SCM.Git".
  desiredTechnologyNames = "OS,OS.Linux,Language,Language.Xml,SCM,SCM.Git"

  # If, when you run the Zap tests, you find alerts that you have investigated and don't see as a problem
  # you can filter them out by adding to this list, using the cweid and the url regex that the alert was found on.
  # The CWE ID is a Common Weakness Enumeration (http://cwe.mitre.org/data/index.html), you can
  # find this by looking at the alert output from your tests.
  # example: alertsToIgnore = [{cweid: "16", url: "http://localhost:9999/hello/\\w{3}/here"},
  # {cweid: "17", url: "http://localhost:9999/hello/\\w{3}/here"}]
  alertsToIgnore = [
//    {cweid: "829", url: "http://localhost:9760/robots.txt"},
//    {cweid: "829", url: "http://localhost:9760/sitemap.xml"},
//    {cweid: "829", url: "http://localhost:9760/help/.*"},
//    {cweid: "829", url: "http://localhost:9760/form-label"},
//    {cweid: "200", url: "http://localhost:9760/.*"}
  ]

  debug {
    # Checks if the testUrl configured above returns a 2xx or 3xx response and fails if it returns anything else
    healthCheck=true

    # When set to true the library deletes the run context and policy, and clears down all of the alerts generated during
    # execution of the scans
    tearDown = true

    # Set to true if you would like zap-automation to print it's config to the console
    printConfig=true

    # Timeout value for patience config in seconds. Test times out if spider or active scan does not finish within configured time.
    patienceConfigTimeout=600

    # Interval value for patience config in seconds. Spider and Active Scan status is checked at this interval until the scan is completed.
    patienceConfigInterval=2
  }
}

my-blocking-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    // or in Akka 2.4.2+
    fixed-pool-size = 16
  }
  throughput = 100
}